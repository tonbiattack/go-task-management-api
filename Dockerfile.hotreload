# =============================================================================
# ホットリロード + デバッグ用Dockerfile（Development Hot Reload Environment）
# =============================================================================
# VSCode + Docker + Air + Delveを統合した最高効率の開発環境
# ファイル保存時の自動リビルド・再起動とリアルタイムデバッグを同時実現
# 開発者の生産性を最大化する究極の開発体験を提供

# =============================================================================
# 開発環境ベースイメージ（Go 1.21 + Alpine Linux）
# =============================================================================
# Go 1.21の最新機能とパフォーマンス向上を活用
# Alpine Linuxベースで軽量性を保ちつつ開発ツールを豊富に提供
# 本番環境との互換性を保ちながら開発効率を最大化
FROM golang:1.21-alpine

# =============================================================================
# 開発環境の作業ディレクトリ設定
# =============================================================================
# Go開発のベストプラクティスに従い $GOPATH/src/app を作業ディレクトリに設定
# /go/src/app: Go Workspaceの標準的な構成に準拠
# ホストとコンテナ間でのボリュームマウントに最適化された構造
# IDEとの連携時に最も自然な開発体験を提供
WORKDIR /go/src/app

# =============================================================================
# 開発に必要な基本ツールのインストール
# =============================================================================
# ホットリロード開発とバージョン管理に必要なパッケージをインストール
# apk add: Alpine Linuxのパッケージマネージャー
# --no-cache: パッケージキャッシュを残さずイメージサイズを削減
# git: Go Modulesの依存関係取得、バージョン管理、Air設定での使用
#      開発中のコミット履歴管理とリモートリポジトリとの同期に必要
RUN apk add --no-cache git

# =============================================================================
# Air（ホットリロードツール）のインストール
# =============================================================================
# Air: Goアプリケーション専用のホットリロード（Live Reload）ツール
# github.com/cosmtrek/air: 公式のAirパッケージ
# @v1.40.4: 安定性と互換性が検証された特定バージョンを指定
#           最新版での予期しない動作変更を回避
# 機能詳細:
#   - ファイル変更の自動検出（.go, .html, .css, .js等）
#   - 変更検出時の自動リビルドとプロセス再起動
#   - ビルドエラーの即座な表示とログ出力
#   - 設定ファイル（.air.toml）による柔軟なカスタマイズ
#   - デバッガーとの連携サポート
RUN go install github.com/cosmtrek/air@v1.40.4

# =============================================================================
# Delve（デバッガー）のインストール
# =============================================================================
# Delve（dlv）: Goアプリケーション専用の高機能デバッガー
# github.com/go-delve/delve/cmd/dlv: 公式のDelveコマンドラインツール
# @latest: 最新安定版を自動選択（最新のGo言語機能に対応）
# Air + Delveの統合により実現される開発体験:
#   - コード変更時の自動リロード + ブレークポイント維持
#   - ホットリロード中でもデバッグセッション継続
#   - IDEからのリアルタイムデバッグ制御
#   - 変数監視とステップ実行の即座な反映
RUN go install github.com/go-delve/delve/cmd/dlv@latest

# =============================================================================
# 依存関係の事前セットアップ（Go Modules）
# =============================================================================
# Go Modulesファイルを先行してコピー（Dockerキャッシュ最適化）
# ホットリロード開発でも依存関係の変更が無い限りキャッシュを活用
# 開発中の依存関係追加時のみこのレイヤーが再実行される
COPY go.mod go.sum ./

# Go Modulesの依存関係をダウンロード
# go mod download: go.modに記載された全ての依存関係をダウンロード
# ホットリロード時の依存関係解決時間を短縮
# 開発中のパッケージ追加・更新が高速化される
RUN go mod download

# =============================================================================
# ソースコードのマウント準備とAir設定
# =============================================================================
# 重要: 実際のソースコードはボリュームマウントで提供される予定
# ホスト側での編集がリアルタイムでコンテナに反映される仕組み
# ただし、Air設定ファイルは事前にコピーして確実に利用可能にする
# .air.toml: Airの動作をカスタマイズする設定ファイル
#   - 監視対象ファイル・ディレクトリの指定
#   - ビルドコマンドとオプションの設定
#   - 除外パターン（.git, tmp, vendor等）の定義
#   - デバッグモードとの連携設定
COPY .air.toml ./

# =============================================================================
# Air作業ディレクトリの準備
# =============================================================================
# Airが一時ファイルとビルド成果物を保存するディレクトリを作成
# mkdir -p: 親ディレクトリも含めて再帰的にディレクトリを作成
# tmp: Air設定ファイル（.air.toml）で指定された一時ディレクトリ
#      ビルドされたバイナリファイルやログファイルが保存される
#      ホットリロード時の高速なファイル操作を実現
RUN mkdir -p tmp

# =============================================================================
# 開発用ネットワーク設定
# =============================================================================
# ホットリロード開発とデバッグに必要なポートを公開
# 8080: アプリケーションのHTTPサービスポート
#       開発中のWebアプリケーションへのブラウザアクセス用
#       APIテストとフロントエンド開発での使用
# 2345: Delveデバッガーのリモートデバッグサーバーポート
#       IDEからのデバッグ接続用（VSCode、GoLand等）
#       ホットリロード中もデバッグセッションを維持
EXPOSE 8080 2345

# =============================================================================
# ホットリロード + デバッグの統合起動設定
# =============================================================================
# Airを設定ファイル付きで起動してホットリロード機能を開始
# air: Airホットリロードツールのコマンド
# -c .air.toml: 設定ファイルを明示的に指定
# .air.tomlに記載される重要な設定例:
#   - cmd: デバッグ対応ビルドコマンド（-gcflags="all=-N -l"）
#   - bin: 出力バイナリの場所（./tmp/main）
#   - include_ext: 監視対象ファイル拡張子（.go, .tpl, .tmpl等）
#   - exclude_dir: 除外ディレクトリ（.git, vendor, node_modules等）
#   - delay: ファイル変更検出後の待機時間（ミリ秒）
# この起動により以下の開発ワークフローが実現:
#   1. ファイル保存 → 2. 自動検出 → 3. リビルド → 4. 再起動 → 5. デバッグ継続
CMD ["air", "-c", ".air.toml"]