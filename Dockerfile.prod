# =============================================================================
# 本番環境用Dockerfile（Production Environment）
# =============================================================================
# 本番環境での運用を想定した高度にセキュリティ最適化されたDockerfile
# マルチステージビルドによりイメージサイズの最小化とセキュリティ強化を実現
# セキュリティ機能：非rootユーザー実行、最小限のパッケージ、バイナリ最適化

# =============================================================================
# ビルドステージ（マルチステージビルドの第1段階）
# =============================================================================
# Go開発環境をベースとしたビルド専用ステージ
# Alpine Linuxベースで軽量性とセキュリティを両立
FROM golang:1.20-alpine AS builder

# =============================================================================
# ビルド環境の作業ディレクトリ設定
# =============================================================================
# ビルド作業を行うディレクトリを /app に設定
# ソースコードのコンパイルと依存関係の管理をこのディレクトリで実行
WORKDIR /app

# =============================================================================
# セキュリティ強化: 必要なツールのインストール
# =============================================================================
# 本番環境のセキュリティ要件を満たすための追加パッケージをインストール
# apk update: パッケージリストを最新に更新
# git: Go Modulesが外部リポジトリから依存関係を取得する際に必要
# ca-certificates: HTTPS通信での証明書検証に必要なCA証明書バンドル
# --no-cache: パッケージキャッシュを残さずイメージサイズを削減
RUN apk update && apk add --no-cache git ca-certificates

# =============================================================================
# 依存関係の管理と検証（Go Modules + セキュリティ検証）
# =============================================================================
# Go Modulesファイルを先行してコピー（Dockerキャッシュ最適化）
# 依存関係が変更されていない場合、このレイヤーはキャッシュから再利用される
COPY go.mod go.sum ./

# 依存関係のダウンロードとセキュリティ検証を実行
# go mod download: go.modに記載された依存関係をダウンロード
# go mod verify: go.sumを使用して依存関係の整合性を検証
# この検証により、依存関係が改ざんされていないことを保証
RUN go mod download && go mod verify

# =============================================================================
# ソースコードのコピー
# =============================================================================
# アプリケーションの全ソースコードをビルド環境にコピー
# 依存関係の処理後に行うことで、ソースコード変更時のビルド効率を向上
COPY . .

# =============================================================================
# 本番用最適化ビルド設定
# =============================================================================
# 本番環境向けに高度に最適化されたGoバイナリをビルド
# CGO_ENABLED=0: CGOを無効化して完全な静的リンクバイナリを生成
# GOOS=linux: LinuxOS向けにクロスコンパイル
# GOARCH=amd64: AMD64アーキテクチャ向けに最適化
# -a: 全パッケージを強制的に再ビルド（キャッシュの影響を排除）
# -installsuffix cgo: CGO無効時の識別子
# -ldflags の詳細説明:
#   -w: DWARFデバッグ情報を削除（バイナリサイズ削減）
#   -s: シンボルテーブルを削除（バイナリサイズ削減、リバースエンジニアリング対策）
#   -X main.version=...: ビルド時にバージョン情報を埋め込み
# -trimpath: ビルドパスを削除してセキュリティ向上（ファイルパス情報の漏洩防止）
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -a -installsuffix cgo \
    -ldflags="-w -s -X main.version=$(git describe --tags --always --dirty)" \
    -trimpath \
    -o main .

# =============================================================================
# 本番用実行ステージ（マルチステージビルドの第2段階）
# =============================================================================
# 実行専用の最小限環境
# Alpine Linuxの最新版をベースとして高いセキュリティレベルを維持
FROM alpine:latest

# =============================================================================
# セキュリティアップデートと必要最小限のパッケージインストール
# =============================================================================
# 本番環境のセキュリティ要件を満たすためのシステム更新とパッケージ管理
# apk update: パッケージリストを最新に更新
# apk upgrade: 既存パッケージを最新版にアップグレード（セキュリティパッチ適用）
# パッケージの説明:
#   ca-certificates: HTTPS通信に必要なCA証明書バンドル
#   tzdata: タイムゾーン情報（ログの時刻表示やスケジューリングに必要）
#   wget: ヘルスチェック用のHTTPクライアント
# update-ca-certificates: CA証明書ストアを更新
# rm -rf /var/cache/apk/*: パッケージキャッシュを削除してイメージサイズ削減
RUN apk update && \
    apk upgrade && \
    apk add --no-cache ca-certificates tzdata wget && \
    update-ca-certificates && \
    rm -rf /var/cache/apk/*

# =============================================================================
# セキュリティ強化: 非rootユーザーの作成
# =============================================================================
# コンテナセキュリティのベストプラクティスに従い、非特権ユーザーを作成
# rootユーザーでの実行を避けることで、権限昇格攻撃のリスクを軽減
# addgroup: システムグループ "appgroup" を作成（GID: 1001）
#   -g 1001: グループIDを明示的に指定
#   -S: システムグループとして作成
# adduser: システムユーザー "appuser" を作成（UID: 1001）
#   -u 1001: ユーザーIDを明示的に指定
#   -S: システムユーザーとして作成
#   -G appgroup: appgroupをプライマリグループに設定
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# =============================================================================
# 実行環境の作業ディレクトリ設定
# =============================================================================
# アプリケーション実行時の作業ディレクトリを /app に設定
# この場所でアプリケーションバイナリを実行し、
# 必要に応じて一時ファイルやログファイルを出力
WORKDIR /app

# =============================================================================
# アプリケーションバイナリの配置と権限設定
# =============================================================================
# ビルドステージで作成された最適化済みバイナリをコピー
# --from=builder: ビルドステージから直接ファイルをコピー
COPY --from=builder /app/main .

# セキュリティ上適切な権限設定を実行
# chown: ファイル所有者を非rootユーザー（appuser:appgroup）に変更
# chmod +x: 実行権限を付与
# この設定により、rootユーザー以外でもアプリケーションを実行可能にする
RUN chown appuser:appgroup /app/main && \
    chmod +x /app/main

# =============================================================================
# セキュリティ強化: 非rootユーザーへの切り替え
# =============================================================================
# 以降の全ての操作を非特権ユーザー（appuser）で実行
# これにより、万一アプリケーションに脆弱性があっても、
# システム全体への影響を最小限に抑制できる
USER appuser

# =============================================================================
# ネットワーク設定
# =============================================================================
# アプリケーションが使用するポート番号を宣言
# 8080番ポートでHTTPサーバーが起動することを明示
# 実際のポート公開は docker run 時の -p オプションで制御
EXPOSE 8080

# =============================================================================
# ヘルスチェック設定（コンテナ監視とオーケストレーション対応）
# =============================================================================
# Docker/Kubernetesでのコンテナ健全性監視のためのヘルスチェック設定
# --interval=30s: 30秒間隔でヘルスチェックを実行
# --timeout=3s: ヘルスチェックのタイムアウトを3秒に設定
# --start-period=5s: コンテナ起動後5秒間は失敗を無視（起動時間を考慮）
# --retries=3: 3回連続で失敗した場合にコンテナを不健全と判定
# wget でアプリケーションの /health エンドポイントにアクセスして応答を確認
# --no-verbose: 出力を最小限に抑制
# --tries=1: リトライ無しで1回のみ試行
# --spider: ファイルをダウンロードせずにHTTPヘッダーのみ確認
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# =============================================================================
# アプリケーション起動設定
# =============================================================================
# コンテナ起動時のデフォルトコマンド
# 配列形式（exec form）で記述することにより：
# 1. シェルを経由せず直接プロセスを起動（PID 1で実行）
# 2. 適切なシグナルハンドリング（SIGTERM等）が可能
# 3. ゾンビプロセスの発生を防止
# ./main: 先ほどコピーした最適化済みのGoバイナリを実行
CMD ["./main"]